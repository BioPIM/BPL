////////////////////////////////////////////////////////////////////////////////
// BPL, the Process In Memory library for bioinformatics 
// date  : 2024
// author: edrezen
////////////////////////////////////////////////////////////////////////////////

// This code is designed to retrieve the sizeof sum of arguments that are tagged with 'global'.
// The idea is to provoke a compilation error and then analyzes the message in order to retrieve
// the value of interest.

extern "C"
{
    int me();
    int perfcounter_get();
    int printf (const char* fmt, ...);
}

#ifndef __DUMMY__
    // Since we are going to concatenate several generated files into a single one, we have to
    // be sure that we don't have multiple definitions of the same symbol => we define __DUMMY__ for this
    #define __DUMMY__
    #include <bpl/core/Task.hpp>
    #include <bpl/arch/ArchUpmemResources.hpp>
#endif

#include <tasks/@TASKNAME@.hpp>

// We create a dummy namespace => we will be able to concatenate all the generated files into a single 
// one without name collision.
namespace _@TASKNAME@_ 
{
    using globalparams_t = bpl::core::transform_tuple_t <
        typename bpl::core::pack_predicate_partition_t <
            bpl::core::hastag_global,
            bpl::core::task_params_t<@TASKNAME@ <bpl::arch::ArchUpmemResources @TASKTEMPLATE@>>
        >::first_type,
        bpl::core::removetag_once,
        bpl::core::removetag_global
    >;
    
    static const globalparams_t object;
    
    // https://stackoverflow.com/questions/78580764/retrieving-from-gcc-clang-a-value-known-at-compilation-time/78580978#78580978
    template<auto> class error;
    error<bpl::core::sum_sizeof (object)> print;
};